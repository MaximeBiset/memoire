from django.utils.translation import ugettext_lazy as _
from django.utils import timezone
from django.template.defaultfilters import slugify
from django.core.urlresolvers import reverse
from django.db import models
from django.db.models.query import QuerySet
from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
from django.contrib.contenttypes.models import ContentType
from model_utils.managers import PassThroughManager
from multiselectfield import MultiSelectField

from main.models import User, JobCategory, MemberType

# Need the definition of Branch for the FWBusinessUnit model
# from branch.models import Branch

class FWMoney(models.Model):
    """
    estimated_time = models.IntegerField(verbose_name=_("Temps estimé (en minutes)"), blank=True, null=True)
    real_time = models.IntegerField(verbose_name=_("Temps réel (en minutes)"), blank=True, null=True)
    """
    class Meta:
        abstract = True

class FWSuccessDemand(models.Model):
    """
    time = models.IntegerField(verbose_name=_("Temps passé (en minutes)"), blank=True, null=True)
    """
    class Meta:
        abstract = True

class BUManager(QuerySet):
    def up_to_date(self):
        date_now = timezone.now() + timezone.timedelta(hours=-24)
        return self.filter(date__gte=date_now)

    def down_to_date(self):
        date_now = timezone.now() + timezone.timedelta(hours=24)
        return self.filter(date__lte=date_now)

    def no_successs(self):
        return self.filter(success_fill=False)

class FWBusinessUnit(FWMoney):

    donor = models.ForeignKey(User, verbose_name=_("Donneur"), related_name="%(class)s_donor", null=True, blank=True)
    receiver =  models.ForeignKey(User, verbose_name=_("Receveur"), related_name="%(class)s_receiver", null=True, blank=True)
    description = models.TextField(verbose_name=_("Description"), blank=True, null=True)
    title = models.CharField(_('Titre'), max_length=120, null=True, blank=False)
    receive_help_from_who = models.IntegerField(choices=MemberType.MEMBER_TYPES_GROUP, default=MemberType.ALL,
                                      verbose_name=_("Qui peut voir et répondre à la demande/offre ?"))
    date = models.DateTimeField(verbose_name=_("Date"))

    objects = PassThroughManager.for_queryset_class(BUManager)()

    class Meta:
        abstract = True


