from django.utils.translation import ugettext as _
from django.utils.translation import ugettext_lazy as __
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth import logout as _logout
from django.contrib.auth import authenticate, login as _login
from registration import signals
from django.contrib.sites.models import RequestSite
from django.contrib.sites.models import Site
from registration.models import RegistrationProfile
from registration.backends.default.views import RegistrationView as BaseRegistrationView
from main.forms import ProfileManagementForm, VerifiedInformationForm, EmergencyContactCreateForm, \
            VerifiedProfileForm, JobSearchForm, GiftForm, AddUser, NonProfileManagementForm
from main.models import User, VerifiedInformation, EmergencyContact, JobCategory, JobType, MemberType, GIVINGTO
from branch.models import Demand, Offer
from django.contrib.auth.decorators import login_required, user_passes_test
from django.utils.decorators import method_decorator
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.views.generic.edit import CreateView
from branch.models import Branch, BranchMembers, TIME_CHOICES
from postman.api import pm_write
from django.db.models import Q
from django.views.generic.detail import DetailView
from django.core import serializers

from main.ajax.views import *
import sys
from os.path import abspath, dirname
import datetime

from django.utils import timezone
from django.views.generic.edit import UpdateView
from django.contrib.messages.views import SuccessMessageMixin
from main.utils import can_manage, is_branch_admin, refuse, can_manage_branch_specific, is_in_branch, \
                        discriminate_demands, discriminate_offers


@login_required
def credits_view(request):
    """view for credit menu and gitf"""
    """
    user = request.user
    #TODO : Rajouter le champ finish = true dans job et offer et finish = false dans les autres.
    jobs = Demand.objects.filter(closed=True,donor=user,success=True).all() # tâches que j'ai faîtes
    offer = Demand.objects.filter(closed=True,receiver=user,success=True).all() # tâches que j'ai reçue
    jobs_pending = Demand.objects.filter(closed=True,donor=user,success=None).all() # tâches que je vais faire
    offer_pending = Demand.objects.filter(closed=True,receiver=user,success=None).all() # tâches que je vais recevoir
    num_jobs = len(jobs)
    average_time_job = 0
    km = 0      # TODO: This variable is not used (On l'affiche dans la template)
    for job in jobs :

        average_time_job += job.real_time

        km += job.km
    if num_jobs != 0:
        average_time_job = average_time_job/num_jobs
    form = GiftForm(ruser=user)
    if request.POST:
        form = GiftForm(request.POST, ruser=user)
        if form.is_valid():
            if form.cleaned_data['check'] == '1':
                friend = User.objects.get(username=form.cleaned_data['user'])
            else :
                friend = get_object_or_404(User, pk=1)
            if not friend :
                return render(request,'credit/credit_page.html.html', locals())
            friend.credit += form.cleaned_data['amount']
            user.credit -= form.cleaned_data['amount']
            user.save()
            friend.save()
            title = _("Cadeau de : {amount} minutes").format(amount=str(form.cleaned_data['amount']))
            pm_write(user, friend, title, form.cleaned_data['message'])
            return redirect('home')

    return render(request,'credit/credit_page.html', locals())
    """
